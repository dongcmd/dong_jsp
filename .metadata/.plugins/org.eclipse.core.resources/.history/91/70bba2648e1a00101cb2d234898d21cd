package model.member;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;

import model.DBConnection;
import model.MybatisConnection;
import model.mapper.MemberMapper;

public class MemberDao {
	private Class<MemberMapper> cls = MemberMapper.class;
	private Map<String, Object> map = new HashMap<>();
	
	 public boolean insert(Member mem) {
		 SqlSession session = MybatisConnection.getConnection();

		 try {
			 //executeUpdate() : 실행 후 변경된 레코드의 갯수 리턴 
			 if(session.getMapper(cls).insert(mem) > 0) return true;
			 else return false;
		 } catch(Exception e) {
			 e.printStackTrace();
		 } finally {
			 MybatisConnection.close(session);
		 }
		 return false;
	 }
	 
	 public Member selectOne(String id) {
		 SqlSession session = MybatisConnection.getConnection();
		 try {
			 return session.getMapper(cls).selectOne(id);
		 } catch (Exception e) {
			 e.printStackTrace();
		 } finally {
			 MybatisConnection.close(session);
		 }
		 return null;		 
	 }
	 
	 public List<Member> list() {
		 SqlSession session = MybatisConnection.getConnection();
		 try {
			 return session.getMapper(cls).selectList();
		 } catch (Exception e) {
			 e.printStackTrace();
		 } finally {
			 MybatisConnection.close(session);
		 }
		 return null;
	 }
	 
	 public boolean update(Member mem) {
		 SqlSession session = MybatisConnection.getConnection();
		 try {
			 return session.getMapper(cls).update(mem) > 0;		 
		 } catch(Exception e) {
			 e.printStackTrace();
		 } finally {
			 MybatisConnection.close(session);
		 }
		 return false;
	 }
	 
	 public boolean delete(String id) {
		 SqlSession session = MybatisConnection.getConnection();
		 try {
			 return session.getMapper(cls).delete(id) > 0;
		 } catch(Exception e) {
			 e.printStackTrace();
		 } finally {
			 MybatisConnection.close(session);
		 }
		 return false;
	 }
	 
	 public String idSearch(String email, String tel) {
		 SqlSession session = MybatisConnection.getConnection();
		 try {
			 return session.getMapper(cls).idSearch(map);
		 } catch(Exception e) {
			 e.printStackTrace();
		 } finally {
			 MybatisConnection.close(session);
		 }
		 return null;
	 }
	 public String pwSearch(String id, String email, String tel) {
		 SqlSession session = MybatisConnection.getConnection();
		 String sql = "select pass from member"
		 		+ " where id=? and email=? and tel=?";
		 try {
			 return session.getMapper(cls).pwSearch(id, email, tel);
		 } catch(Exception e) {
			 e.printStackTrace();
		 } finally {
			 MybatisConnection.close(session);
		 }
		 return null;		 
	 }
	 public boolean updatePass(String id, String chgpass) {
		 SqlSession session = MybatisConnection.getConnection();
		 String sql = "update member set pass=? where id=?";
		 try {
			 return session.getMapper(cls).updatePass(id, chgpass) > 0;
		 } catch(Exception e) {
			 e.printStackTrace();
		 } finally {
			 MybatisConnection.close(session);
		 }
		 return false;
	 }
	 public List<Member> emailList(String[] ids) {
			SqlSession session = MybatisConnection.getConnection();
			PreparedStatement pstmt = null;
			ResultSet rs = null;
			// sb = 't1', 't2'
			StringBuilder sb = new StringBuilder();
			for (int i = 0; i < ids.length; i++) {
				sb.append("'" + ids[i] + ((i < ids.length - 1) ? "'," : "'"));
			}
			List<Member> list = new ArrayList<>();
			// sql : select * from member where id in ('t1, 't2') 
			String sql = "select * from member where id in (" + sb.toString() + ")";
			try {
				pstmt = conn.prepareStatement(sql);
				rs = pstmt.executeQuery();
				while (rs.next()) {
					Member m = new Member();
					m.setId(rs.getString("id"));
					m.setName(rs.getString("name"));
					m.setGender(rs.getInt("gender"));
					m.setEmail(rs.getString("email"));
					m.setPicture(rs.getString("picture"));
					list.add(m);
				}
				if (list.size() > 0) {
					System.out.println(list.size());
					return list;
				} else {
					return null;
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				DBConnection.close(conn, pstmt, rs);
			}
			return null;
		}
}
